#!/usr/bin/env bash
set -eu -o pipefail
# set -x

# shellcheck disable=SC2034
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck disable=SC2034
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"

# use [[ -n $IS_MAC ]] if is mac.
IS_MAC=$( uname | grep Darwin || echo '' )

LOG="/tmp/$(basename "$0")_$(date +%s)"
touch "$LOG"

writeLog() {
	printf "%s" "$*" | tee -a "$LOG"
}
writeDebugLog() {
	printf "%s" "$*" >> "$LOG"
}

# Usage
usage() {
	cat <<END
 $0 [-d|--maxdepth DEPTH] [-r|--remove] [-] PATH
Finds broken symlinks.
Use -r to delete the found broken links.
END
}

USAGE_EXITCODE=200
# shellcheck disable=SC2120
usageAndExit() {
	usage
	if [[ $# = 1 ]]; then exit "$1"; else exit "$USAGE_EXITCODE"; fi
}

cleanup() {
	code="$?"
	if [[ "$code" -eq 0 ]]
	then
		echo "done"
	elif [[ "$code" -ne "$USAGE_EXITCODE" ]]
	then
		# case: error other than usage message
		onError
	fi
	exit "$code"
}
onError() {
	echo "error. Logs in $LOG"
}
# cleanup: on script exit
# Both success and fail
trap cleanup EXIT RETURN

main() {
	if [[ $# = 0 ]]; then usageAndExit; fi

	# step: parse options
	local searchPath=
	local searchOptions=
	local removeLinks=
	while [[ $# -gt 0 ]]
	do
		case "$1" in
			# case: option with value
			-d|--maxdepth)
				searchOptions="-maxdepth $2 "
				shift
				;;
			-r|--remove)
				removeLinks=1
				;;
			# case: explicit start of positional arguments
			# e.g. script.sh - a b
			- )
				shift
				break
				;;
			# case: error handling
			-*)
				echo "Unknown option $1" >&2
				usageAndExit
				;;
			# case: implicit start of positional argument
			*)
				break
				;;
			esac
		shift
	done

	searchPath="$*"
	[[ ! -d $searchPath ]] && echo "Search path $searchPath does not exist" && usageAndExit

	# note: readlink options
	# -f = canonical link
	# Only non-macos
	readlinkOpt="-f"
	[[ -n "$IS_MAC" ]] && readlinkOpt=""

	# DOES NOT WORK
	# while read -r resPath
	# do
	# done < <(find "$searchPath" $searchOptions -type l ! -exec test -e {} \; -print)

	# note: use array loop instead of the `CMD | while read do ...done` trick
	# The while trick does not allow prompting

	# NOTE: 
	# - IFS to split the array by ONLY newline instead of default (newline, whitespace, tab)
	# - need to run command before changing the IFS because this affects expansion of searchOptions
	#  	e.g.
	# 		searchOptions="-maxdepth 2"
	# 		IFS=$'\n'
	# 		$(find "$searchPath" $searchOptions) 			ERROR 'find: -maxdepth 2 : unknown primary or operator'
	#
	# shellcheck disable=SC2086
	result=$(find "$searchPath" $searchOptions -type l ! -exec test -e {} \; -print)
	OLDIFS=$IFS
	IFS=$'\n'
	# shellcheck disable=SC2206
	files=($result)
	IFS=$OLDIFS
	writeLog "# broken links found: ${#files[@]}" $'\n'
	writeDebugLog "${files[@]}" $'\n' 

	for linksrc in "${files[@]}"
	do
		# shellcheck disable=SC2086
		echo "$linksrc" >> "$LOG"
		linktarget="$(readlink $readlinkOpt "$linksrc")"
		linktext="$linksrc -> $linktarget"
		writeLog "$(printf "broken link:  %s" "$linktext")"
		if [[ "$removeLinks" ]] 
		then
			writeLog $'\t' "REMOVED"
			rm "$linksrc"
		fi
		writeLog $'\n'
	done

	echo "log in $LOG"
}

(main "$@")
