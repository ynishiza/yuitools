[core]
	fileMode = false
	editor = vim
	whitespace = trailing-space

	# -R	show color
	# -F	use less only if doesn't fit in a single screen
	pager = LESS= less -FR --LONG-PROMPT --incsearch
[pretty]
	# colors
	# - yellow: SHA1
	# - blue: branch
	# - red:
	# - green: author
	ls = %C(yellow) %h %Cred %cr %C(green) %G? %an %C(blue)%d %Creset %s
[push]
	default = nothing
[alias]
	# Config
	aliases = "! git config --get-regex 'alias.*' | sort | less"
	configall = config --list
	dfcm = "!f() { cat <(git lp develop~1..develop) ; }; f "

	## Shortcuts
	#
	st = status
	b = branch
	c = commit
	co = checkout
	cop = checkout -p
	df = diff --stat -p
	dfmergebase = df --merge-base		# merge base i.e. common ancestor
	dfupstream = df @{u}						# upstream
	dfc = diff --cached --stat -p
	dfs = diff --stat
	dfword = diff --word-diff
	dfstat = diff --stat
	dfsum = diff --summary
	dt = difftool
	m = merge
	mmaster = merge origin/master
	mmain = merge origin/main
	mt = mergetool
	f = fetch --prune
	fo = fetch origin --prune --tags

	## Log
	#
	lsa = log --pretty=ls
	ls = log -10 --pretty=ls
	lg = log --graph
	lp = log -p --show-signature
	lst = log --stat --show-signature
	last = log --stat -1 -p --show-signature

	# Diff against previous value of a branch
	# e.g. after a new commit, diff changes by the commit
	#			i.e. in this case, same as `diff HEAD~`
	# e.g. after a rebase, diff changes by the rebase
	# e.g. after a commit ammend, diff changes by the ammend
	dfprev = diff --stat -p @{1}			# previous
	dfprev2 = diff --stat -p @{2}			# 2 changes ago
	dfprev3 = diff --stat -p @{3}
	dfprev4 = diff --stat -p @{4}
	dfprev5 = diff --stat -p @{5}
	dfprev6 = diff --stat -p @{6}
	dfprev7 = diff --stat -p @{7}
	dfprev8 = diff --stat -p @{8}
	dfprev9 = diff --stat -p @{9}

	## Branch
	bv = branch -vv
	bva = branch -vv -a

	# Reference: https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	rbv = rbva --count 20
	rbva = for-each-ref --sort=-committerdate refs/remotes/ --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname) %(color:reset) [%(color:blue)%(committeremail)%(color:reset)] (%(color:green)%(committerdate:relative)%(color:reset))'
	bd = branch -d
	bD = branch -D
	bf = branch -f
	upstream = "!f() { git branch --set-upstream-to=$1; }; f"
	upstreamOf = "!f() { git branch $1 --set-upstream-to=$2; }; f"

	## Commits
	#
	ai = add -i
	ap = add -p
	au = add --update
	cS = commit -S
	ca = commit --amend
	caS = commit --amend -S
	caa = commit --amend -a
	uncommit = reset --soft HEAD~
	clear = "!echo \"Changes:\"; git status --short --untracked-files=no; echo 'Clear all this? (y/n)'; read A; if [ \"$A\" = 'y' ]; then git reset --hard HEAD; else exit 1; fi"
	cob = checkout -b

	# Misc
	pop = stash pop
	test = "!fn() { echo \"Hello $@ There\"; }; fn"
	rerereclearall = "!f() { [[ ! -d .git/rr-cache ]] && exit 0; echo 'Clear rerere cache? (y/n)'; read A;  if [ \"$A\" = 'y' ]; then rm -rf .git/rr-cache; else exit 1; fi; }; f"

[credential]
	helper = store
[merge]
	tool = vimdiff
	conflictstyle = diff3
[mergetool]
	prompt = true
[color]
	branch = 1
[gitreview]
	remote = origin
[diff]
	tool = vimdiff
[difftool]
	prompt = true
[rerere]
	enabled = true
