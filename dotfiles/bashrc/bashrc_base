#!/bin/bash
MY_BIN="$HOME/.yui_bin"
TOOLS_YUI="$HOME/.yui_tools"
BASHRC_YUI="${TOOLS_YUI}/dotfiles/bashrc"
BASHRCBASE_PATH="$BASHRC_YUI/bashrc_base"

# [[ -n $IS_MAC ]] if is mac.
IS_MAC=$( uname | grep Darwin || echo '' )

_main() {
	echo "Loading ${BASH_SOURCE[0]}"
	_setupEnv
	_setupAliases
	_setupPS1
	_setupFunction
	_loadTools
	_setupTools

	## Custom bashrc
	#
	# Do this last. Otherwise, may get overwritten by default.
	if [[ -n $IS_MAC ]]
	then
		source "$BASHRC_YUI/bashrc_mac"
	fi
	source "$BASHRC_YUI/bashrc_fzf"
	source "$BASHRC_YUI/bashrc_snort"
}

_loadTools() {
	## Tools
	#
	loadSourceIfExist() {
		local source_path="$1"
		if [[ -f "$source_path" ]];
		then
			source "$source_path"
		fi
	}
	loadSourceIfExist "${MY_BIN}/git-completion.bash"
	loadSourceIfExist "${MY_BIN}/tmuxinator.bash"
}

_setupTools() {
	# GPG
	SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
	export SSH_AUTH_SOCK
	gpgconf --launch gpg-agent
}

_setupPS1() {
	## PS1
	#
	# See PROMPTING in man bash
	#
	# \s = Shell
	# \h = hostname
	# \H = Full hostname
	# \u = Current user
	# \w = Current directory from the user's home directory
	# \W = Current directory
	BLACK="\[\e[30m\]"
	RED="\[\e[31m\]"
	GREEN="\[\e[32m\]"
	YELLOW="\[\e[33m\]"
	BLUE="\[\e[34m\]"
	MAGENTA="\[\e[35m\]"
	CYAN="\[\e[36m\]"
	WHITE="\[\e[37m\]"
	RESET="\[\e[0m\]"
	export PS1="${WHITE}\u${RESET}@${WHITE}\H${RESET}:${BLUE}\W${RESET} [j=${RED}\j${RESET}] >> "
}


_setupAliases() {
	alias pu="pushd"
	alias po="popd"
	alias ll="ls -alF"
	alias la="ls -A"
	alias rm="rm -i"
	alias cp="cp -i"
	alias mv="mv -i"
	alias less="less -N"

	alias doublequote="sed -e 's/\(.*\)/\"\1\"/'"
	alias singlequote="sed -e \"s/\(.*\)/'\1'/\""
	alias timecmd="/usr/bin/time /bin/bash -c"

	# To enable <C-S> to work in vim.
	alias vim="stty stop '' -ixoff; vim"

	# Include local node_modules in path
	# https://stackoverflow.com/questions/9679932/how-to-use-package-installed-locally-in-node-modules
	alias npm-exec='PATH=$(npm bin):$PATH'

	# Only works if no values contain no spaces 
	alias dotenv-use="env \$(cat .env | grep -v '^#' | xargs)"
	alias dotenv-export="export \$(cat .env | grep -v '^#' | xargs)"
}


_setupFunction() {
	PrintSystemInfo() {
		echo "Bash:$SHELL $BASH_VERSION"
		echo "Date:$(date)"
		echo "Kernel:$(uname -a)"
		echo "User:$(whoami)"
		echo "Host:$(hostname)"
	}
	# Bug: printing here caused problems when uploading with scp.

	DotEnvExport() {
		while read -r line
		do
			# Skip comment
			if echo "$line" | grep '^#' >/dev/null; then continue; fi
			# shellcheck disable=SC2163
			export "$line"
		done < .env 
	}

	DotEnvUse() {
		# shellcheck disable=SC2068
		( DotEnvExport; $@ )
	}
}


_setupEnv() {
	## Settings
	#
	# EDITOR: default editor
	export EDITOR=vim

	setupPath
}

setupPath() {
	## Path
	#
	# Take backup so that if this bashrc is reloaded, we don't duplicate paths.
	if [[ ! $PATH_BAK ]]; then PATH_BAK=$PATH; fi
	PATH=$PATH_BAK

	PATH=/usr/sbin:$PATH
	PATH=/usr/local/bin:/usr/local/sbin:/usr/sbin:$PATH
	PATH="$MY_BIN:$PATH"
	PATH=$HOME/.node_modules/bin:$PATH:
	export PATH_BAK
	export PATH
}

setupCustomVariables() {
	# Nothing yet
	: 
}

_main
