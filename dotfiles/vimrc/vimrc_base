"
" My vimrc file
"

"---------------------------------------------------------------
"						OPTIONS
"

" Filetype options
" - plugin
" - indent
filetype plugin indent on 

"
"set background=dark

"  omni complete
set omnifunc=syntaxcomplete#Complete


" Tabs
set autoindent
set tabstop=4
set shiftwidth=4

" Backspace
" - use backspace to delete eol, indents, and start of an insert.
set backspace=eol,indent,start


" list (invisibile characters)
set listchars=tab:>-,eol:$,nbsp:Â»


" Display line numbers in editor.
set number


" Indent automatically on new line.
set autoindent

"
" Status
"
" show status bar.
set laststatus=2
set statusline=""
" show line and column number.
set ruler

" Fold			
"set foldmethod=syntax
set foldmethod=manual
"let javaScript_fold=1


"
" Ctags
"
" Where to look for tag files
set tags=./tags,./ctags


" Syntax highlighting.
syntax enable 
"set background=dark
"colorscheme solarized


"
" Search
"
" Highlight matches.
set hlsearch
" Highlight as I type.
set incsearch
"set ignorecase

"---------------------------------------------------------------
"					 Language specific 
"

" Comment term in the script
let t:comment_term="//"

function! VimInit()
	let t:comment_term="\""
endfunction

function! PythonInit()
    "echo "python"
	let t:comment_term="#"
    set autoindent
    " Use spaces instead of tabs
	" set expandtab
    " 4 spaces
    set tabstop=4
    set shiftwidth=4
endfunction

function! PHPInit()
	let g:myvar="php"
	let t:comment_term="//"
	call PythonWithTabs()
endfunction

function! JSInit()
	let t:comment_term="//"
	call JSWithTabs()
endfunction

function! BashInit()
	let t:comment_term="#"
endfunction

function! RInit()
	let t:comment_term="#"
endfunction

function! MakefileInit()
	let t:comment_term="#"
endfunction

"
function! CommentInsert()
	"execute "'<,'>s=^=" . t:comment_term . "="
	if !exists("t:comment_term")
		let t:comment_term = "//"
	endif
	execute "s=^=" . t:comment_term . "="
endfunction
function! CommentRemove()
	if !exists("t:comment_term")
		let t:comment_term = "//"
	endif
	"execute "'<,'>s=^" . t:comment_term . "=="
	execute "s=^" . t:comment_term . "=="
endfunction

function! MarkdownInit()
	set expandtab
	set tabstop=2
	set shiftwidth=2
endfunction

function! MyTestFunct()
	s/abc/ABC/gc
endfunction

autocmd FileType vim call VimInit()
autocmd FileType python call PythonInit()
autocmd FileType php call PHPInit()
autocmd FileType javascript call JSInit()
autocmd FileType r call RInit()
autocmd FileType sh call BashInit()
autocmd FileType make call MakefileInit()
autocmd FileType markdown call MarkdownInit()

" Manually recognize filetypes
autocmd BufRead *.md set filetype=markdown
autocmd BufRead *.json set filetype=json

"
" Language specific settings
"

" Python 
function! PythonWithSpaces(x)
	set expandtab
	let &tabstop=a:x
	let &shiftwidth=a:x
endfunction
function! PythonWithTabs()
	set noexpandtab
	set tabstop=4
	set shiftwidth=4
endfunction

" JavaScript 
function! JSWithSpaces(x)
	set expandtab
	let &tabstop=a:x
	let &shiftwidth=a:x
endfunction
function! JSWithTabs()
	set noexpandtab
	set tabstop=4
	set shiftwidth=4
endfunction


"---------------------------------------------------------------
"					  MAPPING	
"
" Leader
let mapleader="\<space>"
imap <c-j> <ESC>

" Save with <c-s>
map <leader>s :w<CR>
map <c-s> <ESC>:w<CR>
imap <c-s> <ESC>:w<CR>
" Close with <c-q>
" Doesn't work?
map <c-q> :tabc<CR>
imap <c-q> <ESC>:tabc<CR>

" My commands
" - prefix with <c-j>
map <leader>s :w<CR>
" Search for word under cursor.
map <leader>f /<c-r>=expand("<cword>")<cr>
" Search and replace word under cursor.
map <leader>r :%s/\<<c-r>=expand("<cword>")<cr>\>
map <leader>g :vimgrep /\<<c-r>=expand("<cword>")<cr>\>/ 
map <leader>l :so $MYVIMRC<cr>
" Shortcuts for my functions
map <leader>c :call CommentInsert()<cr>
map <leader>C :call CommentRemove()<cr>

" Tern
map <leader>td :TernDoc<cr>
map <leader>td :TernDef<cr>
map <leader>tb :TernDocBrowse<cr>
map <leader>tpd :TernDefPreview<cr>
map <leader>tt :TernType<cr>
map <leader>tr :TernRefs<cr>
map <leader>tR :TernRename<cr>



"---------------------------------------------------------------
"						PLUGINS
" 						
"
" Taglist
"
" See the ctags file.
let tlist_markdown_settings="markdown;h:header"
let tlist_r_settings = "r;f:function"
let tlist_php_settings="php;f:function;d:constant;a:class"
let tlist_javascript_settings_base = "javascript;e:class;d:class_property;q:constant;r:@module;n:@property;t:@class;o:@method;u:@construct"
let tlist_javascript_settings = tlist_javascript_settings_base . ";f:function"
map <F8> :TlistToggle<CR>

"
" Tern
" 
let g:tern_show_argument_hints="on_hold"


"---------------------------------------------------------------
"						MISC
"

" neobundle
so $HOME/.vimrc_yui/vimrc_neobundle

"
" LoadCustomVim : 
"
function! LoadCustomVim() 
	let mod = ":h"
	let dir = expand("%:p" . mod)

	" Default vimrc.
	let myvimrc = resolve(expand("$MYVIMRC"))
	"echo myvimrc
	"
	while dir != "/" 
		let file = dir . "/.vimrc"

		" Expand to full path
		let fullfile = resolve(expand(file))
"		echo file

		" Found vimrc.
		" - Ignore default vimrc.
		if filereadable(file) && fullfile != myvimrc
			"echo "Found custom vim: " . file
			let g:custom_vimrc=file
			execute "so " file ""
			break
		endif

		let mod = mod . ":h"
		let dir = expand("%:p" . mod)
	endwhile
endfunction
call LoadCustomVim()
